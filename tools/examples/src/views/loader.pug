doctype html
html
  head
    meta(charset='utf-8')
    meta(http-equiv='X-UA-Compatible', content='IE=edge,chrome=1')
    title Basic Example
    meta(name='description', content='')
    meta(name='viewport', content='width=device-width')
    link(rel='stylesheet', href='css/common.css')
    // Examples dependencies, these are only necessary for examples
    link(rel='stylesheet', href='../node_modules/google-code-prettify/bin/prettify.min.css')
    script(src='../node_modules/google-code-prettify/bin/prettify.min.js')
    script(src='../node_modules/google-code-prettify/bin/run_prettify.min.js')
    script(src='js/common.js')
    // External dependencies
    script(src='../node_modules/preloadjs/lib/preloadjs.min.js')
    script(src='../node_modules/easeljs/lib/easeljs.combined.js')
    // Library and modules
    script(src='../dist/core.js')
    script(src='../dist/modules/debug.js')
    script(src='../dist/modules/easeljs-display.js')
  body
    #content.canvas
      nav
        button#canvas Application
        button#code Code
        button#back Back
      canvas#stage(width='800', height='500')
      pre#codeDisplay.
      script.
        // Include classes
        var Application = include('springroll.Application'),
        EaselJSDisplay = include('springroll.EaselJSDisplay'),
        Debug = include('springroll.Debug'),
        Shape = include('createjs.Shape');
        var app = new Application({
        canvasId: "stage",
        debug: true,
        display: EaselJSDisplay,
        // Assets can be preloaded using the preload option
        // which is an array of assets to load
        // all preload assets are cached by default
        preload: "assets/images/background.jpg"
        });
        // While preload assets are cache, the result
        // of the preload is accessible by the loaded handler
        app.once('loaded', function(results)
        {
        Debug.green(">>> Preloaded RESULTS", results);
        });
        app.once('init', function()
        {
        // Load a bunch of assets with IDs to get Object results
        // Format: this.load(assets, onComplete, onProgress);
        this.load(
        [
        {
        id:'background',
        src:'assets/images/background.jpg',
        complete: function(result, asset, assets)
        {
        // Add addition asset on callback
        assets.push({
        id:'captions',
        src: "assets/config/captions.json"
        });
        }
        },
        // Can use an asynchronous function
        function(done)
        {
        // do asynchronous task
        Debug.blue("Wait 500ms seconds...");
        setTimeout(function()
        {
        Debug.blue("Wait done.");
        done();
        }, 1000);
        },
        {
        id:'button',
        src:'assets/images/button.png'
        }
        ],
        // Handle the callback
        function(results)
        {
        Debug.green(">>> Object RESULTS", results);
        }
        );
        // Load a simple array of files
        this.load(
        [
        'assets/images/logo.png',
        'assets/images/button.png'
        ],
        {
        complete: function(results)
        {
        Debug.green(">>> Array RESULTS", results);
        },
        progress: function(result, asset)
        {
        Debug.orange(">>> Finished loading", asset.src);
        }
        }
        );
        });
